###############################################################################
## Boot into bios, and select USB to boot
###############################################################################


###############################################################################
## Network setup
###############################################################################

# Open interface connect wifi
iwctl

# List all wlan devices
device list

# Scan network
station wlan0 scan

# Display all network
station wlan0 get-networks

# Connect to network
station wlan0 connect <network-name>

# CTRL + D to exit


###############################################################################
## Time setup
###############################################################################

# Update system time
timedatectl

# Synchronize system time with network
timedatectl set-ntp true


###############################################################################
## Disk partition setup
###############################################################################

# List disk partitions
fdisk -l

# TUI for disk partition
#	EFI - EFI System
#	Linux space - Linux filesystem
#	swap space - Linux swap
cfdisk <disk name>

# To verify change
fdisk -l


###############################################################################
## Format and mount disks
###############################################################################

# Format disks
mkfs.ext4 <path to Linux space>
mkfs.fat -F32 <path to EFI>
mkswap <path to swap space>

lsblk


# Mount disks
# Mount Linux space
mount <path to Linux space> /mnt
# Mount EFI
mkdir /mnt/boot
mount <path to EFI>  /mnt/boot
# Assign swap space
swapon <path to swap space>

# lkblk to confirm
lsblk


###############################################################################
## Install essential stuff (linux-kernel firmware microcode some-applications)
###############################################################################

pacstrap -i /mnt base base-devel linux linux-firmware amd-ucode sudo neofetch htop bluez bluez-utils networkmanager vim 


###############################################################################
## Auto mount configuration file	
###############################################################################

genfstab -U /mnt >> /mnt/etc/fstab


###############################################################################
## Enter arch linux
###############################################################################

arch-chroot /mnt

# Sync packages from pacman
sudo pacman -Syu


###############################################################################
## User setup and configuration
###############################################################################

## Set root password
passwd

# Add new username with group (i.e. workerbbx)
useradd -m -g users -G wheel,storage,power,video,audio -s /bin/bash <username>
passwd <username>

# Set user privilege
visudo 

# Set timezone, region, and link information with local time
ln -sf /usr/share/zoneinfo/Canada/Eastern /etc/localtime

# Sync current time
hwclock --systohc

# Generating locale, to set system language
vim /etc/locale.gen

# Uncomment en_US.UTF-8 and zh_CN.UTF-8 and generate
locale-gen

# Set english as default system language
#   LANG=en_US.UTF-8
vim /etc/locale.conf

# Set hostname
#   <hostname>
vim /etc/hostname

# Set static table lookup for hostnames
#    127.0.0.1		localhost
#    ::1			localhost
#    127.0.1.1		<hostname>.localdomain		<hostname>
vim /etc/hosts

# Enable bluetooth service
systemctl enable bluetooth

# Enable NetworkManager service
systemctl enable NetworkManager


###############################################################################
## Grub configuration
###############################################################################

# Install grub boot loader, help to boot arch linux
pacman -S grub efibootmgr dosfstools mtools	

# Install grub into EFI partition named /boot
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

# Generate grub configuration file
grub-mkconfig -o /boot/grub/grub.cfg

# Exit from chroot and unmount all partitions
exit
umount -lR /mnt

# Shutdown and eject usb
shutdown now


###############################################################################
## Grub configuration (Welcome to arch linux)
###############################################################################

# Log back in
# Connect to network using nmcli (or nmtui)

# Status of network interfaces
nmcli dev status

# Turn on wifi radio
nmcli radio wifi on

# View a list of wifi network
nmcli dev wifi list

# Connect
sudo nmcli dev wifi connect <wifiname> password "password"


###############################################################################
## KDE plasma and SDDM setup
###############################################################################

# Update pacman database
sudo pacman -Sy

# Install Desktop environment KDE Plasma
# optionally 'kde-applications'
sudo pacman -S xorg sddm plasma-meta

# Enable and start SDDM
sudo systemctl enable sddm
sudo systemctl start sddm

# Fix KDE Discover (software center) backend
sudo pacman -Sy flatpak


###############################################################################
## Dual boot setup (win + arch linux)
###############################################################################

# Add windows Boot entry to GRUB boot menu
sudo pacman -Sy os-prober

# Edit grub configuration file
#   Change default timeout
#   Uncomment last line that sets GRUB_DISABLE_OS_PROBER to false
sudo vim /etc/default/grub

# Update grub configuration
sudo grub-mkconfig -o /boot/grub/grub.cfg


###############################################################################
##  Yay setup (pacman wrapper and AUR helper)
###############################################################################

# Update keyring
sudo pacman -Sy archlinux-keyring

# Clone and build yay
mkdir ~/Pacakge
cd ~/Package/
git clone https://aur.archlinux.org/yay.git
cd yay/
makepkg -si


###############################################################################
## Useful applications
###############################################################################

# Essential Applications
sudo pacman -S git firefox nvim openssh fzf tmux clang cmake make gcc zip unzip konsole dolphin libreoffice-fresh

# Fonts and icons
sudo pacman -S noto-fonts noto-fonts-emoji ttf-dejavu ttf-font-awesome noto-fonts-cjk nerd-fonts

# Things required by vimtex
sudo pacman -Sy texlive-latex texlive-latexextra texlive-plaingeneric texlive-binextra

# Optional fonts used by texlive
sudo pacman -Sy texlive-fontsrecommended texlive-fontsextra

# ASUS/ROG tools used to optimize asus/rog laptop performance
yay -Sy asusctl supergfxctl rog-control-center

# Snipaste - Screenshot tool
yay -Sy snipaste


###############################################################################
##  GPU Driver setup
###############################################################################

# Install GPU drivers
# Install Nvidia driver and cuda
sudo pacman -Sy nvidia opencl-nvidia cuda

# Install AMD rocm
sudo pacman -Sy rocm-hip-sdk rocm-hip-runtime hip-runtime-amd hip-runtime-nvidia

# Install GLFW and VulkanSDK (Not driver, but some library/sdk for graphics)
sudo pacman -Sy glfw vulkan-devel


###############################################################################
## SSH setup
###############################################################################

# Generating new SSH key
ssh-keygen -t ed25519 -C "hezhangshuo@gmail.com"
eval "$(ssh-agent -s)"

# Add SSH key to ssh-agent
ssh-add ~/.ssh/id_ed25519

# Copy and add to Github
cat ~/.ssh/id_ed25519.pub


###############################################################################
## Custom services setup
###############################################################################

# Configure force disable DGPU on Integrated mode after resume from lid close
# Copy service to systemd location
cp dgpu_force_disable_on_integrated.service /etc/systemd/system/dgpu_force_disable_on_integrated.service

# Copy script triggered by service to some location
cp dgpu_force_disable_on_integrated.sh /usr/local/bin/dgpu_force_disable_on_integrated.sh

# Enable and start service
sudo systemctl enable --now  dgpu_force_disable_on_integrated.service
sudo systemctl start --now  dgpu_force_disable_on_integrated.service


###############################################################################
## Virtual machine setup (virtualbox)
###############################################################################

# Setup Virtual box
#   Choose virtualbox-host-modules-arch
sudo pacman -S virtualbox

# Load required kernel module
sudo modprobe vboxdrv


###############################################################################
## Custom dot/conf file
###############################################################################

# Tmux config
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
cp .tmux.conf ~/.tmux.conf


